@page "/login"
@layout EmptyLayout
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row min-vh-100 d-flex align-items-center justify-content-center">
        <div class="col-lg-6 d-none d-lg-flex flex-column justify-content-center">
            <div class="text-center">
                <img src="images/illustration.png" alt="Illustration" class="img-fluid">
                <h1 class="mt-4">Fast, Efficient and Productive</h1>
                <p class="text-muted">In this kind of post, the <a href="#">blogger</a> introduces a person they've interviewed and provides some background information about the <a href="#">interviewee</a> and their work following this is a transcript of the interview.</p>
            </div>
        </div>
        <div class="col-lg-4 col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <InputText class="form-control form-control-lg" placeholder="Email" @bind-Value="loginModel.Email" />
                        </div>
                        <div class="mb-3">
                            <InputText type="password" class="form-control form-control-lg" placeholder="Password" @bind-Value="loginModel.Password" />
                        </div>
                        <button type="submit" class="btn btn-primary btn-lg w-100">Sign In</button>
                    </EditForm>
                    <div class="mt-3 text-center">
                        <a href="#">Forgot Password?</a>
                    </div>
                    <div class="mt-3 text-center">
                        <span>Not a Member yet? <a href="/register">Sign up</a></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequestDto loginModel = new();

    private async Task HandleValidSubmit()
    {
        var response = await Auth.Login(loginModel);
        if (response.Result)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.UpdateAuthenticationState(response.JWT);
            NavMan.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", response.ResultMessage);
        }
    }
}